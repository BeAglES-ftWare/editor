# Form implementation generated from reading ui file 'gui/main.ui'
#
# Created by: PyQt6 UI code generator 6.7.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt6 import QtCore, QtGui, QtWidgets
import sys
from syntax import *
from autocomplete import *

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(586, 424)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayoutWidget = QtWidgets.QWidget(parent=self.centralwidget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(0, -1, 201, 341))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.pushButton = QtWidgets.QPushButton(parent=self.horizontalLayoutWidget)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout.addWidget(self.pushButton)
        self.pushButton_3 = QtWidgets.QPushButton(parent=self.horizontalLayoutWidget)
        self.pushButton_3.setObjectName("pushButton_3")
        self.horizontalLayout.addWidget(self.pushButton_3)
        self.fontComboBox = QtWidgets.QFontComboBox(parent=self.centralwidget)
        self.fontComboBox.setGeometry(QtCore.QRect(10, 350, 191, 19))
        self.fontComboBox.setObjectName("fontComboBox")
        self.plainTextEdit = QtWidgets.QPlainTextEdit(parent=self.centralwidget)
        self.plainTextEdit.setGeometry(QtCore.QRect(200, 0, 381, 381))
        self.plainTextEdit.setObjectName("plainTextEdit")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 586, 18))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.pushButton_3.clicked.connect(self.save_file)
        self.pushButton.clicked.connect(self.open_file)
        self.fontComboBox.currentFontChanged.connect(self.change_font)
        self.python_highlighter = PythonHighlighter(self.plainTextEdit.document())
        self.html_highlighter = HTMLHighlighter(self.plainTextEdit.document())
        self.cpp_highlighter = CppHighlighter(self.plainTextEdit.document())
        self.css_highlighter = CSSHighlighter(self.plainTextEdit.document())
        self.csharp_highlighter = CSharpHighlighter(self.plainTextEdit.document())
        self.c_highlighter = CHighlighter(self.plainTextEdit.document())

        # Add Autocompletion
        self.completer = QtWidgets.QCompleter()
        self.completer.setWidget(self.plainTextEdit)
        self.model = QtGui.QStandardItemModel(self.completer)
        self.completer.setModel(self.model)
        self.completer.setCompletionMode(QtWidgets.QCompleter.CompletionMode.PopupCompletion)
        self.plainTextEdit.textChanged.connect(self.update_completions)

        self.filename = None

    def save_file(self):
        self.filename, _ = QtWidgets.QFileDialog.getSaveFileName(None, "Save File", "", "All Files (*)")
        if self.filename:
            with open(self.filename, 'w') as f:
                f.write(self.plainTextEdit.toPlainText())

    def open_file(self):
        self.filename, _ = QtWidgets.QFileDialog.getOpenFileName(None, "Open File", "", "All Files (*)")
        if self.filename:
            with open(self.filename, 'r') as f:
                filelines = f.readlines()
                self.plainTextEdit.clear()
                for fileline in filelines:
                    self.plainTextEdit.insertPlainText(fileline)
            self.update_completions()

    def update_completions(self):
        if self.filename is None:
            return

        if self.filename.endswith('.py'):
            suggestions = PythonSuggestions.get_suggestions
        elif self.filename.endswith('.html'):
            suggestions = HTMLSuggestions.get_suggestions
        elif self.filename.endswith('.cpp') or self.filename.endswith('.h'):
            suggestions = CppSuggestions.get_suggestions
        elif self.filename.endswith('.css'):
            suggestions = CSSSuggestions.get_suggestions
        elif self.filename.endswith('.cs'):
            suggestions = CSharpSuggestions.get_suggestions
        elif self.filename.endswith('.c'):
            suggestions = CSuggestions.get_suggestions
        elif self.filename.endswith('.js'):
            suggestions = JavaScriptSuggestions.get_suggestions
        else:
            suggestions = lambda word_fragment: []

        cursor = self.plainTextEdit.textCursor()
        cursor.select(QtGui.QTextCursor.SelectionType.WordUnderCursor)
        word_fragment = cursor.selectedText()
        suggestions_list = suggestions(word_fragment)
        self.model.clear()
        for suggestion in suggestions_list:
            item = QtGui.QStandardItem(suggestion)
            self.model.appendRow(item)

    def change_font(self):
        font = self.fontComboBox.currentFont()
        self.plainTextEdit.setFont(font)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "Open"))
        self.pushButton_3.setText(_translate("MainWindow", "Save"))

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
